//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SalesforceCon.DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SalesforceConnectorEntities : DbContext
    {
        public SalesforceConnectorEntities()
            : base("name=SalesforceConnectorEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<FBConfiguration> FBConfigurations { get; set; }
        public virtual DbSet<MemberShipLogin> MemberShipLogins { get; set; }
        public virtual DbSet<SalesforceConnectorRequestLog> SalesforceConnectorRequestLogs { get; set; }
        public virtual DbSet<SalesforceConnectorResponseLog> SalesforceConnectorResponseLogs { get; set; }
    
        public virtual int aspdnsf_AddItemToCart(Nullable<int> customerID, Nullable<int> productID, Nullable<int> variantID, Nullable<int> quantity, Nullable<int> shippingAddressID, Nullable<int> billingAddressID, string chosenColor, string chosenColorSKUModifier, string chosenSize, string chosenSizeSKUModifier, string cleanColorOption, string cleanSizeOption, Nullable<decimal> colorAndSizePriceDelta, string textOption, Nullable<int> cartType, Nullable<decimal> customerEnteredPrice, Nullable<int> customerLevelID, Nullable<int> requiresCount, Nullable<byte> isKit2, ObjectParameter newShoppingCartRecID, Nullable<int> storeID, Nullable<bool> isAGift)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var variantIDParameter = variantID.HasValue ?
                new ObjectParameter("VariantID", variantID) :
                new ObjectParameter("VariantID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var shippingAddressIDParameter = shippingAddressID.HasValue ?
                new ObjectParameter("ShippingAddressID", shippingAddressID) :
                new ObjectParameter("ShippingAddressID", typeof(int));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var chosenColorParameter = chosenColor != null ?
                new ObjectParameter("ChosenColor", chosenColor) :
                new ObjectParameter("ChosenColor", typeof(string));
    
            var chosenColorSKUModifierParameter = chosenColorSKUModifier != null ?
                new ObjectParameter("ChosenColorSKUModifier", chosenColorSKUModifier) :
                new ObjectParameter("ChosenColorSKUModifier", typeof(string));
    
            var chosenSizeParameter = chosenSize != null ?
                new ObjectParameter("ChosenSize", chosenSize) :
                new ObjectParameter("ChosenSize", typeof(string));
    
            var chosenSizeSKUModifierParameter = chosenSizeSKUModifier != null ?
                new ObjectParameter("ChosenSizeSKUModifier", chosenSizeSKUModifier) :
                new ObjectParameter("ChosenSizeSKUModifier", typeof(string));
    
            var cleanColorOptionParameter = cleanColorOption != null ?
                new ObjectParameter("CleanColorOption", cleanColorOption) :
                new ObjectParameter("CleanColorOption", typeof(string));
    
            var cleanSizeOptionParameter = cleanSizeOption != null ?
                new ObjectParameter("CleanSizeOption", cleanSizeOption) :
                new ObjectParameter("CleanSizeOption", typeof(string));
    
            var colorAndSizePriceDeltaParameter = colorAndSizePriceDelta.HasValue ?
                new ObjectParameter("ColorAndSizePriceDelta", colorAndSizePriceDelta) :
                new ObjectParameter("ColorAndSizePriceDelta", typeof(decimal));
    
            var textOptionParameter = textOption != null ?
                new ObjectParameter("TextOption", textOption) :
                new ObjectParameter("TextOption", typeof(string));
    
            var cartTypeParameter = cartType.HasValue ?
                new ObjectParameter("CartType", cartType) :
                new ObjectParameter("CartType", typeof(int));
    
            var customerEnteredPriceParameter = customerEnteredPrice.HasValue ?
                new ObjectParameter("CustomerEnteredPrice", customerEnteredPrice) :
                new ObjectParameter("CustomerEnteredPrice", typeof(decimal));
    
            var customerLevelIDParameter = customerLevelID.HasValue ?
                new ObjectParameter("CustomerLevelID", customerLevelID) :
                new ObjectParameter("CustomerLevelID", typeof(int));
    
            var requiresCountParameter = requiresCount.HasValue ?
                new ObjectParameter("RequiresCount", requiresCount) :
                new ObjectParameter("RequiresCount", typeof(int));
    
            var isKit2Parameter = isKit2.HasValue ?
                new ObjectParameter("IsKit2", isKit2) :
                new ObjectParameter("IsKit2", typeof(byte));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var isAGiftParameter = isAGift.HasValue ?
                new ObjectParameter("IsAGift", isAGift) :
                new ObjectParameter("IsAGift", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_AddItemToCart", customerIDParameter, productIDParameter, variantIDParameter, quantityParameter, shippingAddressIDParameter, billingAddressIDParameter, chosenColorParameter, chosenColorSKUModifierParameter, chosenSizeParameter, chosenSizeSKUModifierParameter, cleanColorOptionParameter, cleanSizeOptionParameter, colorAndSizePriceDeltaParameter, textOptionParameter, cartTypeParameter, customerEnteredPriceParameter, customerLevelIDParameter, requiresCountParameter, isKit2Parameter, newShoppingCartRecID, storeIDParameter, isAGiftParameter);
        }
    
        public virtual int aspdnsf_AdjustInventory(Nullable<int> ordernumber, Nullable<short> direction)
        {
            var ordernumberParameter = ordernumber.HasValue ?
                new ObjectParameter("ordernumber", ordernumber) :
                new ObjectParameter("ordernumber", typeof(int));
    
            var directionParameter = direction.HasValue ?
                new ObjectParameter("direction", direction) :
                new ObjectParameter("direction", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_AdjustInventory", ordernumberParameter, directionParameter);
        }
    
        public virtual int aspdnsf_CloneProduct(Nullable<int> productID, Nullable<int> userid)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_CloneProduct", productIDParameter, useridParameter);
        }
    
        public virtual int aspdnsf_CloneStore(Nullable<int> storeID, string newStoreName, ObjectParameter newStoreID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var newStoreNameParameter = newStoreName != null ?
                new ObjectParameter("NewStoreName", newStoreName) :
                new ObjectParameter("NewStoreName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_CloneStore", storeIDParameter, newStoreNameParameter, newStoreID);
        }
    
        public virtual int aspdnsf_CloneVariant(Nullable<int> variantId)
        {
            var variantIdParameter = variantId.HasValue ?
                new ObjectParameter("variantId", variantId) :
                new ObjectParameter("variantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_CloneVariant", variantIdParameter);
        }
    
        public virtual int aspdnsf_CreateFeed(Nullable<int> storeID, string name, Nullable<int> displayOrder, string xmlPackage, Nullable<byte> canAutoFTP, string fTPUsername, string fTPPassword, string fTPServer, Nullable<int> fTPPort, string fTPFilename, string extensionData, ObjectParameter feedID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var xmlPackageParameter = xmlPackage != null ?
                new ObjectParameter("XmlPackage", xmlPackage) :
                new ObjectParameter("XmlPackage", typeof(string));
    
            var canAutoFTPParameter = canAutoFTP.HasValue ?
                new ObjectParameter("CanAutoFTP", canAutoFTP) :
                new ObjectParameter("CanAutoFTP", typeof(byte));
    
            var fTPUsernameParameter = fTPUsername != null ?
                new ObjectParameter("FTPUsername", fTPUsername) :
                new ObjectParameter("FTPUsername", typeof(string));
    
            var fTPPasswordParameter = fTPPassword != null ?
                new ObjectParameter("FTPPassword", fTPPassword) :
                new ObjectParameter("FTPPassword", typeof(string));
    
            var fTPServerParameter = fTPServer != null ?
                new ObjectParameter("FTPServer", fTPServer) :
                new ObjectParameter("FTPServer", typeof(string));
    
            var fTPPortParameter = fTPPort.HasValue ?
                new ObjectParameter("FTPPort", fTPPort) :
                new ObjectParameter("FTPPort", typeof(int));
    
            var fTPFilenameParameter = fTPFilename != null ?
                new ObjectParameter("FTPFilename", fTPFilename) :
                new ObjectParameter("FTPFilename", typeof(string));
    
            var extensionDataParameter = extensionData != null ?
                new ObjectParameter("ExtensionData", extensionData) :
                new ObjectParameter("ExtensionData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_CreateFeed", storeIDParameter, nameParameter, displayOrderParameter, xmlPackageParameter, canAutoFTPParameter, fTPUsernameParameter, fTPPasswordParameter, fTPServerParameter, fTPPortParameter, fTPFilenameParameter, extensionDataParameter, feedID);
        }
    
        public virtual int aspdnsf_CreateGiftCard(string serialNumber, Nullable<int> purchasedByCustomerID, Nullable<int> orderNumber, Nullable<int> shoppingCartRecID, Nullable<int> productID, Nullable<int> variantID, Nullable<decimal> initialAmount, Nullable<decimal> balance, Nullable<System.DateTime> expirationDate, Nullable<int> giftCardTypeID, string eMailName, string eMailTo, string eMailMessage, string validForCustomers, string validForProducts, string validForManufacturers, string validForCategories, string validForSections, string extensionData, ObjectParameter giftCardID)
        {
            var serialNumberParameter = serialNumber != null ?
                new ObjectParameter("SerialNumber", serialNumber) :
                new ObjectParameter("SerialNumber", typeof(string));
    
            var purchasedByCustomerIDParameter = purchasedByCustomerID.HasValue ?
                new ObjectParameter("PurchasedByCustomerID", purchasedByCustomerID) :
                new ObjectParameter("PurchasedByCustomerID", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var shoppingCartRecIDParameter = shoppingCartRecID.HasValue ?
                new ObjectParameter("ShoppingCartRecID", shoppingCartRecID) :
                new ObjectParameter("ShoppingCartRecID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var variantIDParameter = variantID.HasValue ?
                new ObjectParameter("VariantID", variantID) :
                new ObjectParameter("VariantID", typeof(int));
    
            var initialAmountParameter = initialAmount.HasValue ?
                new ObjectParameter("InitialAmount", initialAmount) :
                new ObjectParameter("InitialAmount", typeof(decimal));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(decimal));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            var giftCardTypeIDParameter = giftCardTypeID.HasValue ?
                new ObjectParameter("GiftCardTypeID", giftCardTypeID) :
                new ObjectParameter("GiftCardTypeID", typeof(int));
    
            var eMailNameParameter = eMailName != null ?
                new ObjectParameter("EMailName", eMailName) :
                new ObjectParameter("EMailName", typeof(string));
    
            var eMailToParameter = eMailTo != null ?
                new ObjectParameter("EMailTo", eMailTo) :
                new ObjectParameter("EMailTo", typeof(string));
    
            var eMailMessageParameter = eMailMessage != null ?
                new ObjectParameter("EMailMessage", eMailMessage) :
                new ObjectParameter("EMailMessage", typeof(string));
    
            var validForCustomersParameter = validForCustomers != null ?
                new ObjectParameter("ValidForCustomers", validForCustomers) :
                new ObjectParameter("ValidForCustomers", typeof(string));
    
            var validForProductsParameter = validForProducts != null ?
                new ObjectParameter("ValidForProducts", validForProducts) :
                new ObjectParameter("ValidForProducts", typeof(string));
    
            var validForManufacturersParameter = validForManufacturers != null ?
                new ObjectParameter("ValidForManufacturers", validForManufacturers) :
                new ObjectParameter("ValidForManufacturers", typeof(string));
    
            var validForCategoriesParameter = validForCategories != null ?
                new ObjectParameter("ValidForCategories", validForCategories) :
                new ObjectParameter("ValidForCategories", typeof(string));
    
            var validForSectionsParameter = validForSections != null ?
                new ObjectParameter("ValidForSections", validForSections) :
                new ObjectParameter("ValidForSections", typeof(string));
    
            var extensionDataParameter = extensionData != null ?
                new ObjectParameter("ExtensionData", extensionData) :
                new ObjectParameter("ExtensionData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_CreateGiftCard", serialNumberParameter, purchasedByCustomerIDParameter, orderNumberParameter, shoppingCartRecIDParameter, productIDParameter, variantIDParameter, initialAmountParameter, balanceParameter, expirationDateParameter, giftCardTypeIDParameter, eMailNameParameter, eMailToParameter, eMailMessageParameter, validForCustomersParameter, validForProductsParameter, validForManufacturersParameter, validForCategoriesParameter, validForSectionsParameter, extensionDataParameter, giftCardID);
        }
    
        public virtual int aspdnsf_CreateIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_CreateIndexes");
        }
    
        public virtual int aspdnsf_Get404Suggestions(Nullable<int> storeId)
        {
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_Get404Suggestions", storeIdParameter);
        }
    
        public virtual int aspdnsf_GetCustomerByEmail(string email, Nullable<bool> filterCustomer, Nullable<int> storeID, Nullable<bool> adminOnly)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var filterCustomerParameter = filterCustomer.HasValue ?
                new ObjectParameter("FilterCustomer", filterCustomer) :
                new ObjectParameter("FilterCustomer", typeof(bool));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var adminOnlyParameter = adminOnly.HasValue ?
                new ObjectParameter("AdminOnly", adminOnly) :
                new ObjectParameter("AdminOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetCustomerByEmail", emailParameter, filterCustomerParameter, storeIDParameter, adminOnlyParameter);
        }
    
        public virtual int aspdnsf_GetCustomerByGUID(Nullable<System.Guid> customerGUID)
        {
            var customerGUIDParameter = customerGUID.HasValue ?
                new ObjectParameter("CustomerGUID", customerGUID) :
                new ObjectParameter("CustomerGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetCustomerByGUID", customerGUIDParameter);
        }
    
        public virtual int aspdnsf_GetCustomerByID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetCustomerByID", customerIDParameter);
        }
    
        public virtual int aspdnsf_GetFeaturedProducts(Nullable<int> numHomePageFeaturedProducts, Nullable<int> customerLevelID, Nullable<int> inventoryFilter, Nullable<int> storeID, Nullable<bool> filterProduct)
        {
            var numHomePageFeaturedProductsParameter = numHomePageFeaturedProducts.HasValue ?
                new ObjectParameter("NumHomePageFeaturedProducts", numHomePageFeaturedProducts) :
                new ObjectParameter("NumHomePageFeaturedProducts", typeof(int));
    
            var customerLevelIDParameter = customerLevelID.HasValue ?
                new ObjectParameter("CustomerLevelID", customerLevelID) :
                new ObjectParameter("CustomerLevelID", typeof(int));
    
            var inventoryFilterParameter = inventoryFilter.HasValue ?
                new ObjectParameter("InventoryFilter", inventoryFilter) :
                new ObjectParameter("InventoryFilter", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var filterProductParameter = filterProduct.HasValue ?
                new ObjectParameter("FilterProduct", filterProduct) :
                new ObjectParameter("FilterProduct", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetFeaturedProducts", numHomePageFeaturedProductsParameter, customerLevelIDParameter, inventoryFilterParameter, storeIDParameter, filterProductParameter);
        }
    
        public virtual int aspdnsf_getOrder(Nullable<int> ordernumber)
        {
            var ordernumberParameter = ordernumber.HasValue ?
                new ObjectParameter("ordernumber", ordernumber) :
                new ObjectParameter("ordernumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_getOrder", ordernumberParameter);
        }
    
        public virtual int aspdnsf_GetProducts(Nullable<int> categoryID, Nullable<int> sectionID, Nullable<int> manufacturerID, Nullable<int> distributorID, Nullable<int> genreID, Nullable<int> vectorID, Nullable<int> localeID, Nullable<int> customerLevelID, Nullable<int> affiliateID, Nullable<int> productTypeID, Nullable<bool> viewType, Nullable<int> sortEntity, Nullable<int> pagenum, Nullable<int> pagesize, Nullable<byte> statsFirst, string searchstr, Nullable<byte> extSearch, Nullable<byte> publishedonly, Nullable<byte> excludeKits, Nullable<byte> excludeSysProds, Nullable<int> inventoryFilter, string sortEntityName, string localeName, Nullable<byte> onSaleOnly, Nullable<int> storeID, Nullable<bool> filterProduct, string sortby, Nullable<int> since)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("sectionID", sectionID) :
                new ObjectParameter("sectionID", typeof(int));
    
            var manufacturerIDParameter = manufacturerID.HasValue ?
                new ObjectParameter("manufacturerID", manufacturerID) :
                new ObjectParameter("manufacturerID", typeof(int));
    
            var distributorIDParameter = distributorID.HasValue ?
                new ObjectParameter("distributorID", distributorID) :
                new ObjectParameter("distributorID", typeof(int));
    
            var genreIDParameter = genreID.HasValue ?
                new ObjectParameter("genreID", genreID) :
                new ObjectParameter("genreID", typeof(int));
    
            var vectorIDParameter = vectorID.HasValue ?
                new ObjectParameter("vectorID", vectorID) :
                new ObjectParameter("vectorID", typeof(int));
    
            var localeIDParameter = localeID.HasValue ?
                new ObjectParameter("localeID", localeID) :
                new ObjectParameter("localeID", typeof(int));
    
            var customerLevelIDParameter = customerLevelID.HasValue ?
                new ObjectParameter("CustomerLevelID", customerLevelID) :
                new ObjectParameter("CustomerLevelID", typeof(int));
    
            var affiliateIDParameter = affiliateID.HasValue ?
                new ObjectParameter("affiliateID", affiliateID) :
                new ObjectParameter("affiliateID", typeof(int));
    
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("ProductTypeID", productTypeID) :
                new ObjectParameter("ProductTypeID", typeof(int));
    
            var viewTypeParameter = viewType.HasValue ?
                new ObjectParameter("ViewType", viewType) :
                new ObjectParameter("ViewType", typeof(bool));
    
            var sortEntityParameter = sortEntity.HasValue ?
                new ObjectParameter("sortEntity", sortEntity) :
                new ObjectParameter("sortEntity", typeof(int));
    
            var pagenumParameter = pagenum.HasValue ?
                new ObjectParameter("pagenum", pagenum) :
                new ObjectParameter("pagenum", typeof(int));
    
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var statsFirstParameter = statsFirst.HasValue ?
                new ObjectParameter("StatsFirst", statsFirst) :
                new ObjectParameter("StatsFirst", typeof(byte));
    
            var searchstrParameter = searchstr != null ?
                new ObjectParameter("searchstr", searchstr) :
                new ObjectParameter("searchstr", typeof(string));
    
            var extSearchParameter = extSearch.HasValue ?
                new ObjectParameter("extSearch", extSearch) :
                new ObjectParameter("extSearch", typeof(byte));
    
            var publishedonlyParameter = publishedonly.HasValue ?
                new ObjectParameter("publishedonly", publishedonly) :
                new ObjectParameter("publishedonly", typeof(byte));
    
            var excludeKitsParameter = excludeKits.HasValue ?
                new ObjectParameter("ExcludeKits", excludeKits) :
                new ObjectParameter("ExcludeKits", typeof(byte));
    
            var excludeSysProdsParameter = excludeSysProds.HasValue ?
                new ObjectParameter("ExcludeSysProds", excludeSysProds) :
                new ObjectParameter("ExcludeSysProds", typeof(byte));
    
            var inventoryFilterParameter = inventoryFilter.HasValue ?
                new ObjectParameter("InventoryFilter", inventoryFilter) :
                new ObjectParameter("InventoryFilter", typeof(int));
    
            var sortEntityNameParameter = sortEntityName != null ?
                new ObjectParameter("sortEntityName", sortEntityName) :
                new ObjectParameter("sortEntityName", typeof(string));
    
            var localeNameParameter = localeName != null ?
                new ObjectParameter("localeName", localeName) :
                new ObjectParameter("localeName", typeof(string));
    
            var onSaleOnlyParameter = onSaleOnly.HasValue ?
                new ObjectParameter("OnSaleOnly", onSaleOnly) :
                new ObjectParameter("OnSaleOnly", typeof(byte));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("storeID", storeID) :
                new ObjectParameter("storeID", typeof(int));
    
            var filterProductParameter = filterProduct.HasValue ?
                new ObjectParameter("filterProduct", filterProduct) :
                new ObjectParameter("filterProduct", typeof(bool));
    
            var sortbyParameter = sortby != null ?
                new ObjectParameter("sortby", sortby) :
                new ObjectParameter("sortby", typeof(string));
    
            var sinceParameter = since.HasValue ?
                new ObjectParameter("since", since) :
                new ObjectParameter("since", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetProducts", categoryIDParameter, sectionIDParameter, manufacturerIDParameter, distributorIDParameter, genreIDParameter, vectorIDParameter, localeIDParameter, customerLevelIDParameter, affiliateIDParameter, productTypeIDParameter, viewTypeParameter, sortEntityParameter, pagenumParameter, pagesizeParameter, statsFirstParameter, searchstrParameter, extSearchParameter, publishedonlyParameter, excludeKitsParameter, excludeSysProdsParameter, inventoryFilterParameter, sortEntityNameParameter, localeNameParameter, onSaleOnlyParameter, storeIDParameter, filterProductParameter, sortbyParameter, sinceParameter);
        }
    
        public virtual int aspdnsf_GetShoppingCart(Nullable<byte> cartType, Nullable<int> customerID, Nullable<int> originalRecurringOrderNumber, Nullable<byte> onlyLoadRecurringItemsThatAreDue, Nullable<int> storeID)
        {
            var cartTypeParameter = cartType.HasValue ?
                new ObjectParameter("CartType", cartType) :
                new ObjectParameter("CartType", typeof(byte));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var originalRecurringOrderNumberParameter = originalRecurringOrderNumber.HasValue ?
                new ObjectParameter("OriginalRecurringOrderNumber", originalRecurringOrderNumber) :
                new ObjectParameter("OriginalRecurringOrderNumber", typeof(int));
    
            var onlyLoadRecurringItemsThatAreDueParameter = onlyLoadRecurringItemsThatAreDue.HasValue ?
                new ObjectParameter("OnlyLoadRecurringItemsThatAreDue", onlyLoadRecurringItemsThatAreDue) :
                new ObjectParameter("OnlyLoadRecurringItemsThatAreDue", typeof(byte));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetShoppingCart", cartTypeParameter, customerIDParameter, originalRecurringOrderNumberParameter, onlyLoadRecurringItemsThatAreDueParameter, storeIDParameter);
        }
    
        public virtual int aspdnsf_GetUpsellProductsForCart(Nullable<int> customerId, Nullable<int> customerlevelId, Nullable<int> invFilter, Nullable<int> storeId, Nullable<int> upsellProductsLimitNumberOnCart, Nullable<bool> filterProduct)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("customerId", customerId) :
                new ObjectParameter("customerId", typeof(int));
    
            var customerlevelIdParameter = customerlevelId.HasValue ?
                new ObjectParameter("customerlevelId", customerlevelId) :
                new ObjectParameter("customerlevelId", typeof(int));
    
            var invFilterParameter = invFilter.HasValue ?
                new ObjectParameter("invFilter", invFilter) :
                new ObjectParameter("invFilter", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            var upsellProductsLimitNumberOnCartParameter = upsellProductsLimitNumberOnCart.HasValue ?
                new ObjectParameter("upsellProductsLimitNumberOnCart", upsellProductsLimitNumberOnCart) :
                new ObjectParameter("upsellProductsLimitNumberOnCart", typeof(int));
    
            var filterProductParameter = filterProduct.HasValue ?
                new ObjectParameter("filterProduct", filterProduct) :
                new ObjectParameter("filterProduct", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_GetUpsellProductsForCart", customerIdParameter, customerlevelIdParameter, invFilterParameter, storeIdParameter, upsellProductsLimitNumberOnCartParameter, filterProductParameter);
        }
    
        public virtual int aspdnsf_ImportProductPricing_XML(string document)
        {
            var documentParameter = document != null ?
                new ObjectParameter("document", document) :
                new ObjectParameter("document", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_ImportProductPricing_XML", documentParameter);
        }
    
        public virtual int aspdnsf_insAffiliate(string eMail, string password, string notes, Nullable<byte> isOnline, string firstName, string lastName, string name, string company, string address1, string address2, string suite, string city, string state, string zip, string country, string phone, string webSiteName, string webSiteDescription, string uRL, Nullable<int> defaultSkinID, Nullable<int> parentAffiliateID, Nullable<int> displayOrder, string extensionData, string sEName, string sETitle, string sEAltText, string sEKeywords, string sEDescription, Nullable<byte> wholesale, Nullable<int> saltKey, Nullable<int> storeID, ObjectParameter affiliateID)
        {
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var isOnlineParameter = isOnline.HasValue ?
                new ObjectParameter("IsOnline", isOnline) :
                new ObjectParameter("IsOnline", typeof(byte));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var suiteParameter = suite != null ?
                new ObjectParameter("Suite", suite) :
                new ObjectParameter("Suite", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var webSiteNameParameter = webSiteName != null ?
                new ObjectParameter("WebSiteName", webSiteName) :
                new ObjectParameter("WebSiteName", typeof(string));
    
            var webSiteDescriptionParameter = webSiteDescription != null ?
                new ObjectParameter("WebSiteDescription", webSiteDescription) :
                new ObjectParameter("WebSiteDescription", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var defaultSkinIDParameter = defaultSkinID.HasValue ?
                new ObjectParameter("DefaultSkinID", defaultSkinID) :
                new ObjectParameter("DefaultSkinID", typeof(int));
    
            var parentAffiliateIDParameter = parentAffiliateID.HasValue ?
                new ObjectParameter("ParentAffiliateID", parentAffiliateID) :
                new ObjectParameter("ParentAffiliateID", typeof(int));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var extensionDataParameter = extensionData != null ?
                new ObjectParameter("ExtensionData", extensionData) :
                new ObjectParameter("ExtensionData", typeof(string));
    
            var sENameParameter = sEName != null ?
                new ObjectParameter("SEName", sEName) :
                new ObjectParameter("SEName", typeof(string));
    
            var sETitleParameter = sETitle != null ?
                new ObjectParameter("SETitle", sETitle) :
                new ObjectParameter("SETitle", typeof(string));
    
            var sEAltTextParameter = sEAltText != null ?
                new ObjectParameter("SEAltText", sEAltText) :
                new ObjectParameter("SEAltText", typeof(string));
    
            var sEKeywordsParameter = sEKeywords != null ?
                new ObjectParameter("SEKeywords", sEKeywords) :
                new ObjectParameter("SEKeywords", typeof(string));
    
            var sEDescriptionParameter = sEDescription != null ?
                new ObjectParameter("SEDescription", sEDescription) :
                new ObjectParameter("SEDescription", typeof(string));
    
            var wholesaleParameter = wholesale.HasValue ?
                new ObjectParameter("Wholesale", wholesale) :
                new ObjectParameter("Wholesale", typeof(byte));
    
            var saltKeyParameter = saltKey.HasValue ?
                new ObjectParameter("SaltKey", saltKey) :
                new ObjectParameter("SaltKey", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insAffiliate", eMailParameter, passwordParameter, notesParameter, isOnlineParameter, firstNameParameter, lastNameParameter, nameParameter, companyParameter, address1Parameter, address2Parameter, suiteParameter, cityParameter, stateParameter, zipParameter, countryParameter, phoneParameter, webSiteNameParameter, webSiteDescriptionParameter, uRLParameter, defaultSkinIDParameter, parentAffiliateIDParameter, displayOrderParameter, extensionDataParameter, sENameParameter, sETitleParameter, sEAltTextParameter, sEKeywordsParameter, sEDescriptionParameter, wholesaleParameter, saltKeyParameter, storeIDParameter, affiliateID);
        }
    
        public virtual int aspdnsf_insAppconfig(string name, string description, string configValue, string groupName, Nullable<byte> superOnly, Nullable<int> storeID, string valueType, string allowableValues, ObjectParameter appConfigID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var configValueParameter = configValue != null ?
                new ObjectParameter("ConfigValue", configValue) :
                new ObjectParameter("ConfigValue", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var superOnlyParameter = superOnly.HasValue ?
                new ObjectParameter("SuperOnly", superOnly) :
                new ObjectParameter("SuperOnly", typeof(byte));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var valueTypeParameter = valueType != null ?
                new ObjectParameter("ValueType", valueType) :
                new ObjectParameter("ValueType", typeof(string));
    
            var allowableValuesParameter = allowableValues != null ?
                new ObjectParameter("AllowableValues", allowableValues) :
                new ObjectParameter("AllowableValues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insAppconfig", nameParameter, descriptionParameter, configValueParameter, groupNameParameter, superOnlyParameter, storeIDParameter, valueTypeParameter, allowableValuesParameter, appConfigID);
        }
    
        public virtual int aspdnsf_insBadWord(string localeSetting, string word, ObjectParameter badWordID)
        {
            var localeSettingParameter = localeSetting != null ?
                new ObjectParameter("LocaleSetting", localeSetting) :
                new ObjectParameter("LocaleSetting", typeof(string));
    
            var wordParameter = word != null ?
                new ObjectParameter("Word", word) :
                new ObjectParameter("Word", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insBadWord", localeSettingParameter, wordParameter, badWordID);
        }
    
        public virtual int aspdnsf_insCountryTaxRate(Nullable<int> countryID, Nullable<int> taxClassID, Nullable<decimal> taxRate, ObjectParameter countryTaxID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var taxClassIDParameter = taxClassID.HasValue ?
                new ObjectParameter("TaxClassID", taxClassID) :
                new ObjectParameter("TaxClassID", typeof(int));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insCountryTaxRate", countryIDParameter, taxClassIDParameter, taxRateParameter, countryTaxID);
        }
    
        public virtual int aspdnsf_insEventHandler(string eventName, string calloutURL, string xmlPackage, Nullable<bool> active, Nullable<bool> debug, ObjectParameter eventID)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var calloutURLParameter = calloutURL != null ?
                new ObjectParameter("CalloutURL", calloutURL) :
                new ObjectParameter("CalloutURL", typeof(string));
    
            var xmlPackageParameter = xmlPackage != null ?
                new ObjectParameter("XmlPackage", xmlPackage) :
                new ObjectParameter("XmlPackage", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var debugParameter = debug.HasValue ?
                new ObjectParameter("Debug", debug) :
                new ObjectParameter("Debug", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insEventHandler", eventNameParameter, calloutURLParameter, xmlPackageParameter, activeParameter, debugParameter, eventID);
        }
    
        public virtual int aspdnsf_insGiftCardUsage(Nullable<int> giftCardID, Nullable<int> usageTypeID, Nullable<int> usedByCustomerID, Nullable<int> orderNumber, Nullable<decimal> amount, string extensionData, ObjectParameter giftCardUsageID)
        {
            var giftCardIDParameter = giftCardID.HasValue ?
                new ObjectParameter("GiftCardID", giftCardID) :
                new ObjectParameter("GiftCardID", typeof(int));
    
            var usageTypeIDParameter = usageTypeID.HasValue ?
                new ObjectParameter("UsageTypeID", usageTypeID) :
                new ObjectParameter("UsageTypeID", typeof(int));
    
            var usedByCustomerIDParameter = usedByCustomerID.HasValue ?
                new ObjectParameter("UsedByCustomerID", usedByCustomerID) :
                new ObjectParameter("UsedByCustomerID", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var extensionDataParameter = extensionData != null ?
                new ObjectParameter("ExtensionData", extensionData) :
                new ObjectParameter("ExtensionData", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insGiftCardUsage", giftCardIDParameter, usageTypeIDParameter, usedByCustomerIDParameter, orderNumberParameter, amountParameter, extensionDataParameter, giftCardUsageID);
        }
    
        public virtual int aspdnsf_insProductType(string name, ObjectParameter productTypeID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insProductType", nameParameter, productTypeID);
        }
    
        public virtual int aspdnsf_insStateTaxRate(Nullable<int> stateID, Nullable<int> taxClassID, Nullable<decimal> taxRate, ObjectParameter stateTaxID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var taxClassIDParameter = taxClassID.HasValue ?
                new ObjectParameter("TaxClassID", taxClassID) :
                new ObjectParameter("TaxClassID", typeof(int));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insStateTaxRate", stateIDParameter, taxClassIDParameter, taxRateParameter, stateTaxID);
        }
    
        public virtual int aspdnsf_insTaxclass(string name, string taxCode, Nullable<int> displayOrder, ObjectParameter taxClassID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_insTaxclass", nameParameter, taxCodeParameter, displayOrderParameter, taxClassID);
        }
    
        public virtual int aspdnsf_MoveToShoppingCart(Nullable<int> shoppingCartRecId, Nullable<int> cartType)
        {
            var shoppingCartRecIdParameter = shoppingCartRecId.HasValue ?
                new ObjectParameter("ShoppingCartRecId", shoppingCartRecId) :
                new ObjectParameter("ShoppingCartRecId", typeof(int));
    
            var cartTypeParameter = cartType.HasValue ?
                new ObjectParameter("CartType", cartType) :
                new ObjectParameter("CartType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_MoveToShoppingCart", shoppingCartRecIdParameter, cartTypeParameter);
        }
    
        public virtual int aspdnsf_NukeProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_NukeProduct", productIDParameter);
        }
    
        public virtual int aspdnsf_PABPEraseCCInfo(Nullable<int> cartType)
        {
            var cartTypeParameter = cartType.HasValue ?
                new ObjectParameter("CartType", cartType) :
                new ObjectParameter("CartType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_PABPEraseCCInfo", cartTypeParameter);
        }
    
        public virtual int aspdnsf_ProductInfo(Nullable<int> productID, Nullable<int> customerLevelID, Nullable<byte> defaultVariantOnly, Nullable<int> invFilter, Nullable<int> affiliateID, Nullable<byte> publishedOnly, Nullable<byte> isAdmin, Nullable<int> storeID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var customerLevelIDParameter = customerLevelID.HasValue ?
                new ObjectParameter("CustomerLevelID", customerLevelID) :
                new ObjectParameter("CustomerLevelID", typeof(int));
    
            var defaultVariantOnlyParameter = defaultVariantOnly.HasValue ?
                new ObjectParameter("DefaultVariantOnly", defaultVariantOnly) :
                new ObjectParameter("DefaultVariantOnly", typeof(byte));
    
            var invFilterParameter = invFilter.HasValue ?
                new ObjectParameter("InvFilter", invFilter) :
                new ObjectParameter("InvFilter", typeof(int));
    
            var affiliateIDParameter = affiliateID.HasValue ?
                new ObjectParameter("AffiliateID", affiliateID) :
                new ObjectParameter("AffiliateID", typeof(int));
    
            var publishedOnlyParameter = publishedOnly.HasValue ?
                new ObjectParameter("PublishedOnly", publishedOnly) :
                new ObjectParameter("PublishedOnly", typeof(byte));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(byte));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_ProductInfo", productIDParameter, customerLevelIDParameter, defaultVariantOnlyParameter, invFilterParameter, affiliateIDParameter, publishedOnlyParameter, isAdminParameter, storeIDParameter);
        }
    
        public virtual int aspdnsf_ReloadCart(string cartXML)
        {
            var cartXMLParameter = cartXML != null ?
                new ObjectParameter("CartXML", cartXML) :
                new ObjectParameter("CartXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_ReloadCart", cartXMLParameter);
        }
    
        public virtual int aspdnsf_SaveKitGroup(Nullable<int> kitGroupID, string name, string description, string summary, Nullable<int> productID, Nullable<int> displayOrder, Nullable<int> kitGroupTypeID, Nullable<bool> isRequired, Nullable<bool> isReadOnly, ObjectParameter savedID)
        {
            var kitGroupIDParameter = kitGroupID.HasValue ?
                new ObjectParameter("KitGroupID", kitGroupID) :
                new ObjectParameter("KitGroupID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("Summary", summary) :
                new ObjectParameter("Summary", typeof(string));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var kitGroupTypeIDParameter = kitGroupTypeID.HasValue ?
                new ObjectParameter("KitGroupTypeID", kitGroupTypeID) :
                new ObjectParameter("KitGroupTypeID", typeof(int));
    
            var isRequiredParameter = isRequired.HasValue ?
                new ObjectParameter("IsRequired", isRequired) :
                new ObjectParameter("IsRequired", typeof(bool));
    
            var isReadOnlyParameter = isReadOnly.HasValue ?
                new ObjectParameter("IsReadOnly", isReadOnly) :
                new ObjectParameter("IsReadOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_SaveKitGroup", kitGroupIDParameter, nameParameter, descriptionParameter, summaryParameter, productIDParameter, displayOrderParameter, kitGroupTypeIDParameter, isRequiredParameter, isReadOnlyParameter, savedID);
        }
    
        public virtual int aspdnsf_SaveKitItem(Nullable<int> kitItemID, Nullable<int> kitGroupID, string name, string description, Nullable<decimal> priceDelta, Nullable<decimal> weightDelta, Nullable<bool> isDefault, Nullable<int> displayOrder, Nullable<int> inventoryVariantID, Nullable<int> inventoryQuantityDelta, string inventoryVariantColor, string inventoryVariantSize, ObjectParameter savedID)
        {
            var kitItemIDParameter = kitItemID.HasValue ?
                new ObjectParameter("KitItemID", kitItemID) :
                new ObjectParameter("KitItemID", typeof(int));
    
            var kitGroupIDParameter = kitGroupID.HasValue ?
                new ObjectParameter("KitGroupID", kitGroupID) :
                new ObjectParameter("KitGroupID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceDeltaParameter = priceDelta.HasValue ?
                new ObjectParameter("PriceDelta", priceDelta) :
                new ObjectParameter("PriceDelta", typeof(decimal));
    
            var weightDeltaParameter = weightDelta.HasValue ?
                new ObjectParameter("WeightDelta", weightDelta) :
                new ObjectParameter("WeightDelta", typeof(decimal));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var inventoryVariantIDParameter = inventoryVariantID.HasValue ?
                new ObjectParameter("InventoryVariantID", inventoryVariantID) :
                new ObjectParameter("InventoryVariantID", typeof(int));
    
            var inventoryQuantityDeltaParameter = inventoryQuantityDelta.HasValue ?
                new ObjectParameter("InventoryQuantityDelta", inventoryQuantityDelta) :
                new ObjectParameter("InventoryQuantityDelta", typeof(int));
    
            var inventoryVariantColorParameter = inventoryVariantColor != null ?
                new ObjectParameter("InventoryVariantColor", inventoryVariantColor) :
                new ObjectParameter("InventoryVariantColor", typeof(string));
    
            var inventoryVariantSizeParameter = inventoryVariantSize != null ?
                new ObjectParameter("InventoryVariantSize", inventoryVariantSize) :
                new ObjectParameter("InventoryVariantSize", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_SaveKitItem", kitItemIDParameter, kitGroupIDParameter, nameParameter, descriptionParameter, priceDeltaParameter, weightDeltaParameter, isDefaultParameter, displayOrderParameter, inventoryVariantIDParameter, inventoryQuantityDeltaParameter, inventoryVariantColorParameter, inventoryVariantSizeParameter, savedID);
        }
    
        public virtual int aspdnsf_SecurityLogInsert(string securityAction, string description, Nullable<int> customerUpdated, Nullable<int> updatedBy, Nullable<int> customerSessionID, ObjectParameter logid)
        {
            var securityActionParameter = securityAction != null ?
                new ObjectParameter("SecurityAction", securityAction) :
                new ObjectParameter("SecurityAction", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var customerUpdatedParameter = customerUpdated.HasValue ?
                new ObjectParameter("CustomerUpdated", customerUpdated) :
                new ObjectParameter("CustomerUpdated", typeof(int));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var customerSessionIDParameter = customerSessionID.HasValue ?
                new ObjectParameter("CustomerSessionID", customerSessionID) :
                new ObjectParameter("CustomerSessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_SecurityLogInsert", securityActionParameter, descriptionParameter, customerUpdatedParameter, updatedByParameter, customerSessionIDParameter, logid);
        }
    
        public virtual int aspdnsf_SessionAge(Nullable<int> customerID, Nullable<int> storeId)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var storeIdParameter = storeId.HasValue ?
                new ObjectParameter("storeId", storeId) :
                new ObjectParameter("storeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_SessionAge", customerIDParameter, storeIdParameter);
        }
    
        public virtual int aspdnsf_SessionInsert(Nullable<int> customerID, string sessionValue, string ipaddr, ObjectParameter customerSessionID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var sessionValueParameter = sessionValue != null ?
                new ObjectParameter("SessionValue", sessionValue) :
                new ObjectParameter("SessionValue", typeof(string));
    
            var ipaddrParameter = ipaddr != null ?
                new ObjectParameter("ipaddr", ipaddr) :
                new ObjectParameter("ipaddr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_SessionInsert", customerIDParameter, sessionValueParameter, ipaddrParameter, customerSessionID);
        }
    
        public virtual int aspdnsf_UpdateIndexes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_UpdateIndexes");
        }
    
        public virtual int aspdnsf_UpdateStatistics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_UpdateStatistics");
        }
    
        public virtual int aspdnsf_updOrders(Nullable<int> orderNumber, Nullable<int> parentOrderNumber, string storeVersion, Nullable<byte> quoteCheckout, Nullable<byte> isNew, Nullable<System.DateTime> shippedOn, Nullable<int> customerID, Nullable<System.Guid> customerGUID, string referrer, Nullable<int> skinID, string lastName, string firstName, string email, string notes, Nullable<byte> billingEqualsShipping, string billingLastName, string billingFirstName, string billingCompany, string billingAddress1, string billingAddress2, string billingSuite, string billingCity, string billingState, string billingZip, string billingCountry, string billingPhone, string shippingLastName, string shippingFirstName, string shippingCompany, Nullable<int> shippingResidenceType, string shippingAddress1, string shippingAddress2, string shippingSuite, string shippingCity, string shippingState, string shippingZip, string shippingCountry, Nullable<int> shippingMethodID, string shippingMethod, string shippingPhone, Nullable<int> shippingCalculationID, string phone, Nullable<System.DateTime> registerDate, Nullable<int> affiliateID, string couponCode, Nullable<int> couponType, string couponDescription, Nullable<decimal> couponDiscountAmount, Nullable<decimal> couponDiscountPercent, Nullable<byte> couponIncludesFreeShipping, Nullable<byte> okToEmail, Nullable<byte> deleted, string cardType, string cardName, string cardNumber, string cardExpirationMonth, string cardExpirationYear, Nullable<decimal> orderSubtotal, Nullable<decimal> orderTax, Nullable<decimal> orderShippingCosts, Nullable<decimal> orderTotal, string paymentGateway, string authorizationCode, string authorizationResult, string authorizationPNREF, string transactionCommand, Nullable<System.DateTime> orderDate, Nullable<int> levelID, string levelName, Nullable<decimal> levelDiscountPercent, Nullable<decimal> levelDiscountAmount, Nullable<byte> levelHasFreeShipping, Nullable<byte> levelAllowsQuantityDiscounts, Nullable<byte> levelHasNoTax, Nullable<byte> levelAllowsCoupons, Nullable<byte> levelDiscountsApplyToExtendedPrices, string lastIPAddress, string paymentMethod, string orderNotes, string pONumber, Nullable<System.DateTime> downloadEmailSentOn, Nullable<System.DateTime> receiptEmailSentOn, Nullable<System.DateTime> distributorEmailSentOn, string shippingTrackingNumber, string shippedVIA, string customerServiceNotes, string rTShipRequest, string rTShipResponse, string transactionState, string aVSResult, string captureTXCommand, string captureTXResult, string voidTXCommand, string voidTXResult, string refundTXCommand, string refundTXResult, string cardinalLookupResult, string cardinalAuthenticateResult, string cardinalGatewayParms, Nullable<byte> affiliateCommissionRecorded, string orderOptions, Nullable<decimal> orderWeight, string carrierReportedRate, string carrierReportedWeight, string localeSetting, string finalizationData, string extensionData, Nullable<byte> alreadyConfirmed, Nullable<int> cartType, string tHUB_POSTED_TO_ACCOUNTING, Nullable<System.DateTime> tHUB_POSTED_DATE, string tHUB_ACCOUNTING_REF, string last4, Nullable<byte> readyToShip, Nullable<byte> isPrinted, Nullable<System.DateTime> authorizedOn, Nullable<System.DateTime> capturedOn, Nullable<System.DateTime> refundedOn, Nullable<System.DateTime> voidedOn, Nullable<int> inventoryWasReduced, Nullable<decimal> maxMindFraudScore, string maxMindDetails, string cardStartDate, string cardIssueNumber, Nullable<int> transactionType, Nullable<int> crypt, string vATRegistrationID, Nullable<byte> fraudedOn, string refundReason)
        {
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var parentOrderNumberParameter = parentOrderNumber.HasValue ?
                new ObjectParameter("ParentOrderNumber", parentOrderNumber) :
                new ObjectParameter("ParentOrderNumber", typeof(int));
    
            var storeVersionParameter = storeVersion != null ?
                new ObjectParameter("StoreVersion", storeVersion) :
                new ObjectParameter("StoreVersion", typeof(string));
    
            var quoteCheckoutParameter = quoteCheckout.HasValue ?
                new ObjectParameter("QuoteCheckout", quoteCheckout) :
                new ObjectParameter("QuoteCheckout", typeof(byte));
    
            var isNewParameter = isNew.HasValue ?
                new ObjectParameter("IsNew", isNew) :
                new ObjectParameter("IsNew", typeof(byte));
    
            var shippedOnParameter = shippedOn.HasValue ?
                new ObjectParameter("ShippedOn", shippedOn) :
                new ObjectParameter("ShippedOn", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerGUIDParameter = customerGUID.HasValue ?
                new ObjectParameter("CustomerGUID", customerGUID) :
                new ObjectParameter("CustomerGUID", typeof(System.Guid));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            var skinIDParameter = skinID.HasValue ?
                new ObjectParameter("SkinID", skinID) :
                new ObjectParameter("SkinID", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var billingEqualsShippingParameter = billingEqualsShipping.HasValue ?
                new ObjectParameter("BillingEqualsShipping", billingEqualsShipping) :
                new ObjectParameter("BillingEqualsShipping", typeof(byte));
    
            var billingLastNameParameter = billingLastName != null ?
                new ObjectParameter("BillingLastName", billingLastName) :
                new ObjectParameter("BillingLastName", typeof(string));
    
            var billingFirstNameParameter = billingFirstName != null ?
                new ObjectParameter("BillingFirstName", billingFirstName) :
                new ObjectParameter("BillingFirstName", typeof(string));
    
            var billingCompanyParameter = billingCompany != null ?
                new ObjectParameter("BillingCompany", billingCompany) :
                new ObjectParameter("BillingCompany", typeof(string));
    
            var billingAddress1Parameter = billingAddress1 != null ?
                new ObjectParameter("BillingAddress1", billingAddress1) :
                new ObjectParameter("BillingAddress1", typeof(string));
    
            var billingAddress2Parameter = billingAddress2 != null ?
                new ObjectParameter("BillingAddress2", billingAddress2) :
                new ObjectParameter("BillingAddress2", typeof(string));
    
            var billingSuiteParameter = billingSuite != null ?
                new ObjectParameter("BillingSuite", billingSuite) :
                new ObjectParameter("BillingSuite", typeof(string));
    
            var billingCityParameter = billingCity != null ?
                new ObjectParameter("BillingCity", billingCity) :
                new ObjectParameter("BillingCity", typeof(string));
    
            var billingStateParameter = billingState != null ?
                new ObjectParameter("BillingState", billingState) :
                new ObjectParameter("BillingState", typeof(string));
    
            var billingZipParameter = billingZip != null ?
                new ObjectParameter("BillingZip", billingZip) :
                new ObjectParameter("BillingZip", typeof(string));
    
            var billingCountryParameter = billingCountry != null ?
                new ObjectParameter("BillingCountry", billingCountry) :
                new ObjectParameter("BillingCountry", typeof(string));
    
            var billingPhoneParameter = billingPhone != null ?
                new ObjectParameter("BillingPhone", billingPhone) :
                new ObjectParameter("BillingPhone", typeof(string));
    
            var shippingLastNameParameter = shippingLastName != null ?
                new ObjectParameter("ShippingLastName", shippingLastName) :
                new ObjectParameter("ShippingLastName", typeof(string));
    
            var shippingFirstNameParameter = shippingFirstName != null ?
                new ObjectParameter("ShippingFirstName", shippingFirstName) :
                new ObjectParameter("ShippingFirstName", typeof(string));
    
            var shippingCompanyParameter = shippingCompany != null ?
                new ObjectParameter("ShippingCompany", shippingCompany) :
                new ObjectParameter("ShippingCompany", typeof(string));
    
            var shippingResidenceTypeParameter = shippingResidenceType.HasValue ?
                new ObjectParameter("ShippingResidenceType", shippingResidenceType) :
                new ObjectParameter("ShippingResidenceType", typeof(int));
    
            var shippingAddress1Parameter = shippingAddress1 != null ?
                new ObjectParameter("ShippingAddress1", shippingAddress1) :
                new ObjectParameter("ShippingAddress1", typeof(string));
    
            var shippingAddress2Parameter = shippingAddress2 != null ?
                new ObjectParameter("ShippingAddress2", shippingAddress2) :
                new ObjectParameter("ShippingAddress2", typeof(string));
    
            var shippingSuiteParameter = shippingSuite != null ?
                new ObjectParameter("ShippingSuite", shippingSuite) :
                new ObjectParameter("ShippingSuite", typeof(string));
    
            var shippingCityParameter = shippingCity != null ?
                new ObjectParameter("ShippingCity", shippingCity) :
                new ObjectParameter("ShippingCity", typeof(string));
    
            var shippingStateParameter = shippingState != null ?
                new ObjectParameter("ShippingState", shippingState) :
                new ObjectParameter("ShippingState", typeof(string));
    
            var shippingZipParameter = shippingZip != null ?
                new ObjectParameter("ShippingZip", shippingZip) :
                new ObjectParameter("ShippingZip", typeof(string));
    
            var shippingCountryParameter = shippingCountry != null ?
                new ObjectParameter("ShippingCountry", shippingCountry) :
                new ObjectParameter("ShippingCountry", typeof(string));
    
            var shippingMethodIDParameter = shippingMethodID.HasValue ?
                new ObjectParameter("ShippingMethodID", shippingMethodID) :
                new ObjectParameter("ShippingMethodID", typeof(int));
    
            var shippingMethodParameter = shippingMethod != null ?
                new ObjectParameter("ShippingMethod", shippingMethod) :
                new ObjectParameter("ShippingMethod", typeof(string));
    
            var shippingPhoneParameter = shippingPhone != null ?
                new ObjectParameter("ShippingPhone", shippingPhone) :
                new ObjectParameter("ShippingPhone", typeof(string));
    
            var shippingCalculationIDParameter = shippingCalculationID.HasValue ?
                new ObjectParameter("ShippingCalculationID", shippingCalculationID) :
                new ObjectParameter("ShippingCalculationID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var registerDateParameter = registerDate.HasValue ?
                new ObjectParameter("RegisterDate", registerDate) :
                new ObjectParameter("RegisterDate", typeof(System.DateTime));
    
            var affiliateIDParameter = affiliateID.HasValue ?
                new ObjectParameter("AffiliateID", affiliateID) :
                new ObjectParameter("AffiliateID", typeof(int));
    
            var couponCodeParameter = couponCode != null ?
                new ObjectParameter("CouponCode", couponCode) :
                new ObjectParameter("CouponCode", typeof(string));
    
            var couponTypeParameter = couponType.HasValue ?
                new ObjectParameter("CouponType", couponType) :
                new ObjectParameter("CouponType", typeof(int));
    
            var couponDescriptionParameter = couponDescription != null ?
                new ObjectParameter("CouponDescription", couponDescription) :
                new ObjectParameter("CouponDescription", typeof(string));
    
            var couponDiscountAmountParameter = couponDiscountAmount.HasValue ?
                new ObjectParameter("CouponDiscountAmount", couponDiscountAmount) :
                new ObjectParameter("CouponDiscountAmount", typeof(decimal));
    
            var couponDiscountPercentParameter = couponDiscountPercent.HasValue ?
                new ObjectParameter("CouponDiscountPercent", couponDiscountPercent) :
                new ObjectParameter("CouponDiscountPercent", typeof(decimal));
    
            var couponIncludesFreeShippingParameter = couponIncludesFreeShipping.HasValue ?
                new ObjectParameter("CouponIncludesFreeShipping", couponIncludesFreeShipping) :
                new ObjectParameter("CouponIncludesFreeShipping", typeof(byte));
    
            var okToEmailParameter = okToEmail.HasValue ?
                new ObjectParameter("OkToEmail", okToEmail) :
                new ObjectParameter("OkToEmail", typeof(byte));
    
            var deletedParameter = deleted.HasValue ?
                new ObjectParameter("Deleted", deleted) :
                new ObjectParameter("Deleted", typeof(byte));
    
            var cardTypeParameter = cardType != null ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(string));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var cardNumberParameter = cardNumber != null ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(string));
    
            var cardExpirationMonthParameter = cardExpirationMonth != null ?
                new ObjectParameter("CardExpirationMonth", cardExpirationMonth) :
                new ObjectParameter("CardExpirationMonth", typeof(string));
    
            var cardExpirationYearParameter = cardExpirationYear != null ?
                new ObjectParameter("CardExpirationYear", cardExpirationYear) :
                new ObjectParameter("CardExpirationYear", typeof(string));
    
            var orderSubtotalParameter = orderSubtotal.HasValue ?
                new ObjectParameter("OrderSubtotal", orderSubtotal) :
                new ObjectParameter("OrderSubtotal", typeof(decimal));
    
            var orderTaxParameter = orderTax.HasValue ?
                new ObjectParameter("OrderTax", orderTax) :
                new ObjectParameter("OrderTax", typeof(decimal));
    
            var orderShippingCostsParameter = orderShippingCosts.HasValue ?
                new ObjectParameter("OrderShippingCosts", orderShippingCosts) :
                new ObjectParameter("OrderShippingCosts", typeof(decimal));
    
            var orderTotalParameter = orderTotal.HasValue ?
                new ObjectParameter("OrderTotal", orderTotal) :
                new ObjectParameter("OrderTotal", typeof(decimal));
    
            var paymentGatewayParameter = paymentGateway != null ?
                new ObjectParameter("PaymentGateway", paymentGateway) :
                new ObjectParameter("PaymentGateway", typeof(string));
    
            var authorizationCodeParameter = authorizationCode != null ?
                new ObjectParameter("AuthorizationCode", authorizationCode) :
                new ObjectParameter("AuthorizationCode", typeof(string));
    
            var authorizationResultParameter = authorizationResult != null ?
                new ObjectParameter("AuthorizationResult", authorizationResult) :
                new ObjectParameter("AuthorizationResult", typeof(string));
    
            var authorizationPNREFParameter = authorizationPNREF != null ?
                new ObjectParameter("AuthorizationPNREF", authorizationPNREF) :
                new ObjectParameter("AuthorizationPNREF", typeof(string));
    
            var transactionCommandParameter = transactionCommand != null ?
                new ObjectParameter("TransactionCommand", transactionCommand) :
                new ObjectParameter("TransactionCommand", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var levelIDParameter = levelID.HasValue ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(int));
    
            var levelNameParameter = levelName != null ?
                new ObjectParameter("LevelName", levelName) :
                new ObjectParameter("LevelName", typeof(string));
    
            var levelDiscountPercentParameter = levelDiscountPercent.HasValue ?
                new ObjectParameter("LevelDiscountPercent", levelDiscountPercent) :
                new ObjectParameter("LevelDiscountPercent", typeof(decimal));
    
            var levelDiscountAmountParameter = levelDiscountAmount.HasValue ?
                new ObjectParameter("LevelDiscountAmount", levelDiscountAmount) :
                new ObjectParameter("LevelDiscountAmount", typeof(decimal));
    
            var levelHasFreeShippingParameter = levelHasFreeShipping.HasValue ?
                new ObjectParameter("LevelHasFreeShipping", levelHasFreeShipping) :
                new ObjectParameter("LevelHasFreeShipping", typeof(byte));
    
            var levelAllowsQuantityDiscountsParameter = levelAllowsQuantityDiscounts.HasValue ?
                new ObjectParameter("LevelAllowsQuantityDiscounts", levelAllowsQuantityDiscounts) :
                new ObjectParameter("LevelAllowsQuantityDiscounts", typeof(byte));
    
            var levelHasNoTaxParameter = levelHasNoTax.HasValue ?
                new ObjectParameter("LevelHasNoTax", levelHasNoTax) :
                new ObjectParameter("LevelHasNoTax", typeof(byte));
    
            var levelAllowsCouponsParameter = levelAllowsCoupons.HasValue ?
                new ObjectParameter("LevelAllowsCoupons", levelAllowsCoupons) :
                new ObjectParameter("LevelAllowsCoupons", typeof(byte));
    
            var levelDiscountsApplyToExtendedPricesParameter = levelDiscountsApplyToExtendedPrices.HasValue ?
                new ObjectParameter("LevelDiscountsApplyToExtendedPrices", levelDiscountsApplyToExtendedPrices) :
                new ObjectParameter("LevelDiscountsApplyToExtendedPrices", typeof(byte));
    
            var lastIPAddressParameter = lastIPAddress != null ?
                new ObjectParameter("LastIPAddress", lastIPAddress) :
                new ObjectParameter("LastIPAddress", typeof(string));
    
            var paymentMethodParameter = paymentMethod != null ?
                new ObjectParameter("PaymentMethod", paymentMethod) :
                new ObjectParameter("PaymentMethod", typeof(string));
    
            var orderNotesParameter = orderNotes != null ?
                new ObjectParameter("OrderNotes", orderNotes) :
                new ObjectParameter("OrderNotes", typeof(string));
    
            var pONumberParameter = pONumber != null ?
                new ObjectParameter("PONumber", pONumber) :
                new ObjectParameter("PONumber", typeof(string));
    
            var downloadEmailSentOnParameter = downloadEmailSentOn.HasValue ?
                new ObjectParameter("DownloadEmailSentOn", downloadEmailSentOn) :
                new ObjectParameter("DownloadEmailSentOn", typeof(System.DateTime));
    
            var receiptEmailSentOnParameter = receiptEmailSentOn.HasValue ?
                new ObjectParameter("ReceiptEmailSentOn", receiptEmailSentOn) :
                new ObjectParameter("ReceiptEmailSentOn", typeof(System.DateTime));
    
            var distributorEmailSentOnParameter = distributorEmailSentOn.HasValue ?
                new ObjectParameter("DistributorEmailSentOn", distributorEmailSentOn) :
                new ObjectParameter("DistributorEmailSentOn", typeof(System.DateTime));
    
            var shippingTrackingNumberParameter = shippingTrackingNumber != null ?
                new ObjectParameter("ShippingTrackingNumber", shippingTrackingNumber) :
                new ObjectParameter("ShippingTrackingNumber", typeof(string));
    
            var shippedVIAParameter = shippedVIA != null ?
                new ObjectParameter("ShippedVIA", shippedVIA) :
                new ObjectParameter("ShippedVIA", typeof(string));
    
            var customerServiceNotesParameter = customerServiceNotes != null ?
                new ObjectParameter("CustomerServiceNotes", customerServiceNotes) :
                new ObjectParameter("CustomerServiceNotes", typeof(string));
    
            var rTShipRequestParameter = rTShipRequest != null ?
                new ObjectParameter("RTShipRequest", rTShipRequest) :
                new ObjectParameter("RTShipRequest", typeof(string));
    
            var rTShipResponseParameter = rTShipResponse != null ?
                new ObjectParameter("RTShipResponse", rTShipResponse) :
                new ObjectParameter("RTShipResponse", typeof(string));
    
            var transactionStateParameter = transactionState != null ?
                new ObjectParameter("TransactionState", transactionState) :
                new ObjectParameter("TransactionState", typeof(string));
    
            var aVSResultParameter = aVSResult != null ?
                new ObjectParameter("AVSResult", aVSResult) :
                new ObjectParameter("AVSResult", typeof(string));
    
            var captureTXCommandParameter = captureTXCommand != null ?
                new ObjectParameter("CaptureTXCommand", captureTXCommand) :
                new ObjectParameter("CaptureTXCommand", typeof(string));
    
            var captureTXResultParameter = captureTXResult != null ?
                new ObjectParameter("CaptureTXResult", captureTXResult) :
                new ObjectParameter("CaptureTXResult", typeof(string));
    
            var voidTXCommandParameter = voidTXCommand != null ?
                new ObjectParameter("VoidTXCommand", voidTXCommand) :
                new ObjectParameter("VoidTXCommand", typeof(string));
    
            var voidTXResultParameter = voidTXResult != null ?
                new ObjectParameter("VoidTXResult", voidTXResult) :
                new ObjectParameter("VoidTXResult", typeof(string));
    
            var refundTXCommandParameter = refundTXCommand != null ?
                new ObjectParameter("RefundTXCommand", refundTXCommand) :
                new ObjectParameter("RefundTXCommand", typeof(string));
    
            var refundTXResultParameter = refundTXResult != null ?
                new ObjectParameter("RefundTXResult", refundTXResult) :
                new ObjectParameter("RefundTXResult", typeof(string));
    
            var cardinalLookupResultParameter = cardinalLookupResult != null ?
                new ObjectParameter("CardinalLookupResult", cardinalLookupResult) :
                new ObjectParameter("CardinalLookupResult", typeof(string));
    
            var cardinalAuthenticateResultParameter = cardinalAuthenticateResult != null ?
                new ObjectParameter("CardinalAuthenticateResult", cardinalAuthenticateResult) :
                new ObjectParameter("CardinalAuthenticateResult", typeof(string));
    
            var cardinalGatewayParmsParameter = cardinalGatewayParms != null ?
                new ObjectParameter("CardinalGatewayParms", cardinalGatewayParms) :
                new ObjectParameter("CardinalGatewayParms", typeof(string));
    
            var affiliateCommissionRecordedParameter = affiliateCommissionRecorded.HasValue ?
                new ObjectParameter("AffiliateCommissionRecorded", affiliateCommissionRecorded) :
                new ObjectParameter("AffiliateCommissionRecorded", typeof(byte));
    
            var orderOptionsParameter = orderOptions != null ?
                new ObjectParameter("OrderOptions", orderOptions) :
                new ObjectParameter("OrderOptions", typeof(string));
    
            var orderWeightParameter = orderWeight.HasValue ?
                new ObjectParameter("OrderWeight", orderWeight) :
                new ObjectParameter("OrderWeight", typeof(decimal));
    
            var carrierReportedRateParameter = carrierReportedRate != null ?
                new ObjectParameter("CarrierReportedRate", carrierReportedRate) :
                new ObjectParameter("CarrierReportedRate", typeof(string));
    
            var carrierReportedWeightParameter = carrierReportedWeight != null ?
                new ObjectParameter("CarrierReportedWeight", carrierReportedWeight) :
                new ObjectParameter("CarrierReportedWeight", typeof(string));
    
            var localeSettingParameter = localeSetting != null ?
                new ObjectParameter("LocaleSetting", localeSetting) :
                new ObjectParameter("LocaleSetting", typeof(string));
    
            var finalizationDataParameter = finalizationData != null ?
                new ObjectParameter("FinalizationData", finalizationData) :
                new ObjectParameter("FinalizationData", typeof(string));
    
            var extensionDataParameter = extensionData != null ?
                new ObjectParameter("ExtensionData", extensionData) :
                new ObjectParameter("ExtensionData", typeof(string));
    
            var alreadyConfirmedParameter = alreadyConfirmed.HasValue ?
                new ObjectParameter("AlreadyConfirmed", alreadyConfirmed) :
                new ObjectParameter("AlreadyConfirmed", typeof(byte));
    
            var cartTypeParameter = cartType.HasValue ?
                new ObjectParameter("CartType", cartType) :
                new ObjectParameter("CartType", typeof(int));
    
            var tHUB_POSTED_TO_ACCOUNTINGParameter = tHUB_POSTED_TO_ACCOUNTING != null ?
                new ObjectParameter("THUB_POSTED_TO_ACCOUNTING", tHUB_POSTED_TO_ACCOUNTING) :
                new ObjectParameter("THUB_POSTED_TO_ACCOUNTING", typeof(string));
    
            var tHUB_POSTED_DATEParameter = tHUB_POSTED_DATE.HasValue ?
                new ObjectParameter("THUB_POSTED_DATE", tHUB_POSTED_DATE) :
                new ObjectParameter("THUB_POSTED_DATE", typeof(System.DateTime));
    
            var tHUB_ACCOUNTING_REFParameter = tHUB_ACCOUNTING_REF != null ?
                new ObjectParameter("THUB_ACCOUNTING_REF", tHUB_ACCOUNTING_REF) :
                new ObjectParameter("THUB_ACCOUNTING_REF", typeof(string));
    
            var last4Parameter = last4 != null ?
                new ObjectParameter("Last4", last4) :
                new ObjectParameter("Last4", typeof(string));
    
            var readyToShipParameter = readyToShip.HasValue ?
                new ObjectParameter("ReadyToShip", readyToShip) :
                new ObjectParameter("ReadyToShip", typeof(byte));
    
            var isPrintedParameter = isPrinted.HasValue ?
                new ObjectParameter("IsPrinted", isPrinted) :
                new ObjectParameter("IsPrinted", typeof(byte));
    
            var authorizedOnParameter = authorizedOn.HasValue ?
                new ObjectParameter("AuthorizedOn", authorizedOn) :
                new ObjectParameter("AuthorizedOn", typeof(System.DateTime));
    
            var capturedOnParameter = capturedOn.HasValue ?
                new ObjectParameter("CapturedOn", capturedOn) :
                new ObjectParameter("CapturedOn", typeof(System.DateTime));
    
            var refundedOnParameter = refundedOn.HasValue ?
                new ObjectParameter("RefundedOn", refundedOn) :
                new ObjectParameter("RefundedOn", typeof(System.DateTime));
    
            var voidedOnParameter = voidedOn.HasValue ?
                new ObjectParameter("VoidedOn", voidedOn) :
                new ObjectParameter("VoidedOn", typeof(System.DateTime));
    
            var inventoryWasReducedParameter = inventoryWasReduced.HasValue ?
                new ObjectParameter("InventoryWasReduced", inventoryWasReduced) :
                new ObjectParameter("InventoryWasReduced", typeof(int));
    
            var maxMindFraudScoreParameter = maxMindFraudScore.HasValue ?
                new ObjectParameter("MaxMindFraudScore", maxMindFraudScore) :
                new ObjectParameter("MaxMindFraudScore", typeof(decimal));
    
            var maxMindDetailsParameter = maxMindDetails != null ?
                new ObjectParameter("MaxMindDetails", maxMindDetails) :
                new ObjectParameter("MaxMindDetails", typeof(string));
    
            var cardStartDateParameter = cardStartDate != null ?
                new ObjectParameter("CardStartDate", cardStartDate) :
                new ObjectParameter("CardStartDate", typeof(string));
    
            var cardIssueNumberParameter = cardIssueNumber != null ?
                new ObjectParameter("CardIssueNumber", cardIssueNumber) :
                new ObjectParameter("CardIssueNumber", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var cryptParameter = crypt.HasValue ?
                new ObjectParameter("Crypt", crypt) :
                new ObjectParameter("Crypt", typeof(int));
    
            var vATRegistrationIDParameter = vATRegistrationID != null ?
                new ObjectParameter("VATRegistrationID", vATRegistrationID) :
                new ObjectParameter("VATRegistrationID", typeof(string));
    
            var fraudedOnParameter = fraudedOn.HasValue ?
                new ObjectParameter("FraudedOn", fraudedOn) :
                new ObjectParameter("FraudedOn", typeof(byte));
    
            var refundReasonParameter = refundReason != null ?
                new ObjectParameter("RefundReason", refundReason) :
                new ObjectParameter("RefundReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspdnsf_updOrders", orderNumberParameter, parentOrderNumberParameter, storeVersionParameter, quoteCheckoutParameter, isNewParameter, shippedOnParameter, customerIDParameter, customerGUIDParameter, referrerParameter, skinIDParameter, lastNameParameter, firstNameParameter, emailParameter, notesParameter, billingEqualsShippingParameter, billingLastNameParameter, billingFirstNameParameter, billingCompanyParameter, billingAddress1Parameter, billingAddress2Parameter, billingSuiteParameter, billingCityParameter, billingStateParameter, billingZipParameter, billingCountryParameter, billingPhoneParameter, shippingLastNameParameter, shippingFirstNameParameter, shippingCompanyParameter, shippingResidenceTypeParameter, shippingAddress1Parameter, shippingAddress2Parameter, shippingSuiteParameter, shippingCityParameter, shippingStateParameter, shippingZipParameter, shippingCountryParameter, shippingMethodIDParameter, shippingMethodParameter, shippingPhoneParameter, shippingCalculationIDParameter, phoneParameter, registerDateParameter, affiliateIDParameter, couponCodeParameter, couponTypeParameter, couponDescriptionParameter, couponDiscountAmountParameter, couponDiscountPercentParameter, couponIncludesFreeShippingParameter, okToEmailParameter, deletedParameter, cardTypeParameter, cardNameParameter, cardNumberParameter, cardExpirationMonthParameter, cardExpirationYearParameter, orderSubtotalParameter, orderTaxParameter, orderShippingCostsParameter, orderTotalParameter, paymentGatewayParameter, authorizationCodeParameter, authorizationResultParameter, authorizationPNREFParameter, transactionCommandParameter, orderDateParameter, levelIDParameter, levelNameParameter, levelDiscountPercentParameter, levelDiscountAmountParameter, levelHasFreeShippingParameter, levelAllowsQuantityDiscountsParameter, levelHasNoTaxParameter, levelAllowsCouponsParameter, levelDiscountsApplyToExtendedPricesParameter, lastIPAddressParameter, paymentMethodParameter, orderNotesParameter, pONumberParameter, downloadEmailSentOnParameter, receiptEmailSentOnParameter, distributorEmailSentOnParameter, shippingTrackingNumberParameter, shippedVIAParameter, customerServiceNotesParameter, rTShipRequestParameter, rTShipResponseParameter, transactionStateParameter, aVSResultParameter, captureTXCommandParameter, captureTXResultParameter, voidTXCommandParameter, voidTXResultParameter, refundTXCommandParameter, refundTXResultParameter, cardinalLookupResultParameter, cardinalAuthenticateResultParameter, cardinalGatewayParmsParameter, affiliateCommissionRecordedParameter, orderOptionsParameter, orderWeightParameter, carrierReportedRateParameter, carrierReportedWeightParameter, localeSettingParameter, finalizationDataParameter, extensionDataParameter, alreadyConfirmedParameter, cartTypeParameter, tHUB_POSTED_TO_ACCOUNTINGParameter, tHUB_POSTED_DATEParameter, tHUB_ACCOUNTING_REFParameter, last4Parameter, readyToShipParameter, isPrintedParameter, authorizedOnParameter, capturedOnParameter, refundedOnParameter, voidedOnParameter, inventoryWasReducedParameter, maxMindFraudScoreParameter, maxMindDetailsParameter, cardStartDateParameter, cardIssueNumberParameter, transactionTypeParameter, cryptParameter, vATRegistrationIDParameter, fraudedOnParameter, refundReasonParameter);
        }
    
        public virtual ObjectResult<USP_ActivityLog_CustomerId_Result> USP_ActivityLog_CustomerId(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ActivityLog_CustomerId_Result>("USP_ActivityLog_CustomerId", idParameter);
        }
    
        public virtual ObjectResult<USP_ActivityLog_OrderId_Result> USP_ActivityLog_OrderId(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ActivityLog_OrderId_Result>("USP_ActivityLog_OrderId", idParameter);
        }
    
        public virtual ObjectResult<USP_ActivityLog_SelectAll_Result> USP_ActivityLog_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ActivityLog_SelectAll_Result>("USP_ActivityLog_SelectAll");
        }
    
        public virtual int USP_Address_Insert(Nullable<long> customerId, string address1, string address2, string country, string state, string city, string postalCode, string phoneNumber, string addressType)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Address_Insert", customerIdParameter, address1Parameter, address2Parameter, countryParameter, stateParameter, cityParameter, postalCodeParameter, phoneNumberParameter, addressTypeParameter);
        }
    
        public virtual ObjectResult<USP_Address_SelectByBillingAddressId_Result> USP_Address_SelectByBillingAddressId(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Address_SelectByBillingAddressId_Result>("USP_Address_SelectByBillingAddressId", idParameter);
        }
    
        public virtual ObjectResult<USP_Address_SelectByShippingAddressId_Result> USP_Address_SelectByShippingAddressId(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Address_SelectByShippingAddressId_Result>("USP_Address_SelectByShippingAddressId", idParameter);
        }
    
        public virtual int USP_Address_Update(Nullable<long> id, string address1, string address2, string country, string state, string city, string postalCode, string phoneNumber)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Address_Update", idParameter, address1Parameter, address2Parameter, countryParameter, stateParameter, cityParameter, postalCodeParameter, phoneNumberParameter);
        }
    
        public virtual int USP_Configuration_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Configuration_Delete", idParameter);
        }
    
        public virtual int USP_Configuration_Insert(ObjectParameter id, string consumerId, string consumerSecretKey, string salesForceUserName, string salesForceUserPassword, string securityToken, Nullable<long> customerId, Nullable<bool> isActive, Nullable<bool> leadSettings, Nullable<bool> campaignSettings, string salesforceTokenURL, string callBackURL)
        {
            var consumerIdParameter = consumerId != null ?
                new ObjectParameter("ConsumerId", consumerId) :
                new ObjectParameter("ConsumerId", typeof(string));
    
            var consumerSecretKeyParameter = consumerSecretKey != null ?
                new ObjectParameter("ConsumerSecretKey", consumerSecretKey) :
                new ObjectParameter("ConsumerSecretKey", typeof(string));
    
            var salesForceUserNameParameter = salesForceUserName != null ?
                new ObjectParameter("SalesForceUserName", salesForceUserName) :
                new ObjectParameter("SalesForceUserName", typeof(string));
    
            var salesForceUserPasswordParameter = salesForceUserPassword != null ?
                new ObjectParameter("SalesForceUserPassword", salesForceUserPassword) :
                new ObjectParameter("SalesForceUserPassword", typeof(string));
    
            var securityTokenParameter = securityToken != null ?
                new ObjectParameter("SecurityToken", securityToken) :
                new ObjectParameter("SecurityToken", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var leadSettingsParameter = leadSettings.HasValue ?
                new ObjectParameter("LeadSettings", leadSettings) :
                new ObjectParameter("LeadSettings", typeof(bool));
    
            var campaignSettingsParameter = campaignSettings.HasValue ?
                new ObjectParameter("CampaignSettings", campaignSettings) :
                new ObjectParameter("CampaignSettings", typeof(bool));
    
            var salesforceTokenURLParameter = salesforceTokenURL != null ?
                new ObjectParameter("SalesforceTokenURL", salesforceTokenURL) :
                new ObjectParameter("SalesforceTokenURL", typeof(string));
    
            var callBackURLParameter = callBackURL != null ?
                new ObjectParameter("CallBackURL", callBackURL) :
                new ObjectParameter("CallBackURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Configuration_Insert", id, consumerIdParameter, consumerSecretKeyParameter, salesForceUserNameParameter, salesForceUserPasswordParameter, securityTokenParameter, customerIdParameter, isActiveParameter, leadSettingsParameter, campaignSettingsParameter, salesforceTokenURLParameter, callBackURLParameter);
        }
    
        public virtual ObjectResult<USP_Configuration_Salesforce_Result> USP_Configuration_Salesforce(Nullable<long> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Configuration_Salesforce_Result>("USP_Configuration_Salesforce", customerIdParameter);
        }
    
        public virtual ObjectResult<USP_Configuration_SelectAll_Result> USP_Configuration_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Configuration_SelectAll_Result>("USP_Configuration_SelectAll");
        }
    
        public virtual ObjectResult<USP_Configuration_SelectByApplicationId_Result> USP_Configuration_SelectByApplicationId(string applicationId)
        {
            var applicationIdParameter = applicationId != null ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Configuration_SelectByApplicationId_Result>("USP_Configuration_SelectByApplicationId", applicationIdParameter);
        }
    
        public virtual ObjectResult<USP_Configuration_SelectByCustomerId_Result> USP_Configuration_SelectByCustomerId(Nullable<long> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Configuration_SelectByCustomerId_Result>("USP_Configuration_SelectByCustomerId", customerIdParameter);
        }
    
        public virtual ObjectResult<USP_Configuration_SelectById_Result> USP_Configuration_SelectById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Configuration_SelectById_Result>("USP_Configuration_SelectById", idParameter);
        }
    
        public virtual int USP_Configuration_Update(Nullable<long> id, string consumerId, string consumerSecretKey, string salesForceUserName, string salesForceUserPassword, string securityToken, string salesforceTokenURL, Nullable<bool> leadSettings, string callBackURL, Nullable<bool> campaignSettings, Nullable<bool> isActive)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var consumerIdParameter = consumerId != null ?
                new ObjectParameter("ConsumerId", consumerId) :
                new ObjectParameter("ConsumerId", typeof(string));
    
            var consumerSecretKeyParameter = consumerSecretKey != null ?
                new ObjectParameter("ConsumerSecretKey", consumerSecretKey) :
                new ObjectParameter("ConsumerSecretKey", typeof(string));
    
            var salesForceUserNameParameter = salesForceUserName != null ?
                new ObjectParameter("SalesForceUserName", salesForceUserName) :
                new ObjectParameter("SalesForceUserName", typeof(string));
    
            var salesForceUserPasswordParameter = salesForceUserPassword != null ?
                new ObjectParameter("SalesForceUserPassword", salesForceUserPassword) :
                new ObjectParameter("SalesForceUserPassword", typeof(string));
    
            var securityTokenParameter = securityToken != null ?
                new ObjectParameter("SecurityToken", securityToken) :
                new ObjectParameter("SecurityToken", typeof(string));
    
            var salesforceTokenURLParameter = salesforceTokenURL != null ?
                new ObjectParameter("SalesforceTokenURL", salesforceTokenURL) :
                new ObjectParameter("SalesforceTokenURL", typeof(string));
    
            var leadSettingsParameter = leadSettings.HasValue ?
                new ObjectParameter("LeadSettings", leadSettings) :
                new ObjectParameter("LeadSettings", typeof(bool));
    
            var callBackURLParameter = callBackURL != null ?
                new ObjectParameter("CallBackURL", callBackURL) :
                new ObjectParameter("CallBackURL", typeof(string));
    
            var campaignSettingsParameter = campaignSettings.HasValue ?
                new ObjectParameter("CampaignSettings", campaignSettings) :
                new ObjectParameter("CampaignSettings", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Configuration_Update", idParameter, consumerIdParameter, consumerSecretKeyParameter, salesForceUserNameParameter, salesForceUserPasswordParameter, securityTokenParameter, salesforceTokenURLParameter, leadSettingsParameter, callBackURLParameter, campaignSettingsParameter, isActiveParameter);
        }
    
        public virtual int USP_Custmer_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Custmer_Delete", idParameter);
        }
    
        public virtual int USP_Customer_Insert(ObjectParameter id, string firstName, string lastName, string email, string company, Nullable<bool> isActive, string password, string saltKey, string applicationId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var saltKeyParameter = saltKey != null ?
                new ObjectParameter("SaltKey", saltKey) :
                new ObjectParameter("SaltKey", typeof(string));
    
            var applicationIdParameter = applicationId != null ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Customer_Insert", id, firstNameParameter, lastNameParameter, emailParameter, companyParameter, isActiveParameter, passwordParameter, saltKeyParameter, applicationIdParameter);
        }
    
        public virtual int USP_Customer_Login(ObjectParameter id, string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Customer_Login", id, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<USP_Customer_SelectAll_Result> USP_Customer_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Customer_SelectAll_Result>("USP_Customer_SelectAll");
        }
    
        public virtual ObjectResult<USP_Customer_SelectById_Result> USP_Customer_SelectById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Customer_SelectById_Result>("USP_Customer_SelectById", idParameter);
        }
    
        public virtual int USP_Customer_Update(Nullable<long> id, string firstName, string lastName, string email, string company, Nullable<long> billingAddressId, Nullable<long> shippingAddressId, Nullable<bool> isActive, string password, string saltKey)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var billingAddressIdParameter = billingAddressId.HasValue ?
                new ObjectParameter("BillingAddressId", billingAddressId) :
                new ObjectParameter("BillingAddressId", typeof(long));
    
            var shippingAddressIdParameter = shippingAddressId.HasValue ?
                new ObjectParameter("ShippingAddressId", shippingAddressId) :
                new ObjectParameter("ShippingAddressId", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var saltKeyParameter = saltKey != null ?
                new ObjectParameter("SaltKey", saltKey) :
                new ObjectParameter("SaltKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_Customer_Update", idParameter, firstNameParameter, lastNameParameter, emailParameter, companyParameter, billingAddressIdParameter, shippingAddressIdParameter, isActiveParameter, passwordParameter, saltKeyParameter);
        }
    
        public virtual int USP_CustomerActivity_Insert(Nullable<long> customerId, string activityLog, string activityStatus)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var activityLogParameter = activityLog != null ?
                new ObjectParameter("ActivityLog", activityLog) :
                new ObjectParameter("ActivityLog", typeof(string));
    
            var activityStatusParameter = activityStatus != null ?
                new ObjectParameter("ActivityStatus", activityStatus) :
                new ObjectParameter("ActivityStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_CustomerActivity_Insert", customerIdParameter, activityLogParameter, activityStatusParameter);
        }
    
        public virtual ObjectResult<USP_CustomerName_SelectAll_Result> USP_CustomerName_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CustomerName_SelectAll_Result>("USP_CustomerName_SelectAll");
        }
    
        public virtual int USP_FBConfiguration_Delete(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBConfiguration_Delete", idParameter);
        }
    
        public virtual int USP_FBConfiguration_Insert(ObjectParameter id, string fBDataSource, string fBInitialCatalog, string fBClientId, string fBClientPassword, string fBPort, string fBConnection)
        {
            var fBDataSourceParameter = fBDataSource != null ?
                new ObjectParameter("FBDataSource", fBDataSource) :
                new ObjectParameter("FBDataSource", typeof(string));
    
            var fBInitialCatalogParameter = fBInitialCatalog != null ?
                new ObjectParameter("FBInitialCatalog", fBInitialCatalog) :
                new ObjectParameter("FBInitialCatalog", typeof(string));
    
            var fBClientIdParameter = fBClientId != null ?
                new ObjectParameter("FBClientId", fBClientId) :
                new ObjectParameter("FBClientId", typeof(string));
    
            var fBClientPasswordParameter = fBClientPassword != null ?
                new ObjectParameter("FBClientPassword", fBClientPassword) :
                new ObjectParameter("FBClientPassword", typeof(string));
    
            var fBPortParameter = fBPort != null ?
                new ObjectParameter("FBPort", fBPort) :
                new ObjectParameter("FBPort", typeof(string));
    
            var fBConnectionParameter = fBConnection != null ?
                new ObjectParameter("FBConnection", fBConnection) :
                new ObjectParameter("FBConnection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBConfiguration_Insert", id, fBDataSourceParameter, fBInitialCatalogParameter, fBClientIdParameter, fBClientPasswordParameter, fBPortParameter, fBConnectionParameter);
        }
    
        public virtual ObjectResult<USP_FBConfiguration_SelectAll_Result> USP_FBConfiguration_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FBConfiguration_SelectAll_Result>("USP_FBConfiguration_SelectAll");
        }
    
        public virtual ObjectResult<USP_FBConfiguration_SelectById_Result> USP_FBConfiguration_SelectById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_FBConfiguration_SelectById_Result>("USP_FBConfiguration_SelectById", idParameter);
        }
    
        public virtual int USP_FBConfiguration_Update(Nullable<long> id, string fBDataSource, string fBInitialCatalog, string fBClientId, string fBClientPassword, string fBPort, string fBConnection)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var fBDataSourceParameter = fBDataSource != null ?
                new ObjectParameter("FBDataSource", fBDataSource) :
                new ObjectParameter("FBDataSource", typeof(string));
    
            var fBInitialCatalogParameter = fBInitialCatalog != null ?
                new ObjectParameter("FBInitialCatalog", fBInitialCatalog) :
                new ObjectParameter("FBInitialCatalog", typeof(string));
    
            var fBClientIdParameter = fBClientId != null ?
                new ObjectParameter("FBClientId", fBClientId) :
                new ObjectParameter("FBClientId", typeof(string));
    
            var fBClientPasswordParameter = fBClientPassword != null ?
                new ObjectParameter("FBClientPassword", fBClientPassword) :
                new ObjectParameter("FBClientPassword", typeof(string));
    
            var fBPortParameter = fBPort != null ?
                new ObjectParameter("FBPort", fBPort) :
                new ObjectParameter("FBPort", typeof(string));
    
            var fBConnectionParameter = fBConnection != null ?
                new ObjectParameter("FBConnection", fBConnection) :
                new ObjectParameter("FBConnection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_FBConfiguration_Update", idParameter, fBDataSourceParameter, fBInitialCatalogParameter, fBClientIdParameter, fBClientPasswordParameter, fBPortParameter, fBConnectionParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> USP_GetCustomerId(string salesForceUserName)
        {
            var salesForceUserNameParameter = salesForceUserName != null ?
                new ObjectParameter("SalesForceUserName", salesForceUserName) :
                new ObjectParameter("SalesForceUserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("USP_GetCustomerId", salesForceUserNameParameter);
        }
    
        public virtual ObjectResult<USP_Request_SelectAll_Result> USP_Request_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Request_SelectAll_Result>("USP_Request_SelectAll");
        }
    
        public virtual ObjectResult<USP_Request_SelectById_Result> USP_Request_SelectById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Request_SelectById_Result>("USP_Request_SelectById", idParameter);
        }
    
        public virtual ObjectResult<USP_Responce_SelectAll_Result> USP_Responce_SelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Responce_SelectAll_Result>("USP_Responce_SelectAll");
        }
    
        public virtual ObjectResult<USP_Responce_SelectById_Result> USP_Responce_SelectById(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Responce_SelectById_Result>("USP_Responce_SelectById", idParameter);
        }
    
        public virtual int USP_SalesforceConnectorRequestLog_Insert(ObjectParameter requestId, Nullable<long> customerId, string requestModel)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var requestModelParameter = requestModel != null ?
                new ObjectParameter("RequestModel", requestModel) :
                new ObjectParameter("RequestModel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SalesforceConnectorRequestLog_Insert", requestId, customerIdParameter, requestModelParameter);
        }
    
        public virtual ObjectResult<USP_SalesforceConnectorResponseLog_GetApiByAdmin_Result> USP_SalesforceConnectorResponseLog_GetApiByAdmin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SalesforceConnectorResponseLog_GetApiByAdmin_Result>("USP_SalesforceConnectorResponseLog_GetApiByAdmin");
        }
    
        public virtual ObjectResult<USP_SalesforceConnectorResponseLog_GetApiByCustomerId_Result> USP_SalesforceConnectorResponseLog_GetApiByCustomerId(Nullable<long> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_SalesforceConnectorResponseLog_GetApiByCustomerId_Result>("USP_SalesforceConnectorResponseLog_GetApiByCustomerId", customerIdParameter);
        }
    
        public virtual int USP_SalesforceConnectorResponseLog_Insert(string sFOrderResponse, Nullable<long> customerId, Nullable<int> requestId, string statusCode)
        {
            var sFOrderResponseParameter = sFOrderResponse != null ?
                new ObjectParameter("SFOrderResponse", sFOrderResponse) :
                new ObjectParameter("SFOrderResponse", typeof(string));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(long));
    
            var requestIdParameter = requestId.HasValue ?
                new ObjectParameter("RequestId", requestId) :
                new ObjectParameter("RequestId", typeof(int));
    
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_SalesforceConnectorResponseLog_Insert", sFOrderResponseParameter, customerIdParameter, requestIdParameter, statusCodeParameter);
        }
    }
}
